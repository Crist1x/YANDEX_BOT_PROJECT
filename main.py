from data.imports import *

bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=MemoryStorage())
tovar_pos = 0
male_zodiak = ""
female_zodiak = ""
id_walk = [a for a in range(1, 18)]
index_pos_walk = 0
id_f = 0


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ–≤–∞—Ä–∞
def tovar_generator(position):
    data = requests.get(STUFF[position][0], headers=HEADERS).json()
    with open('db/stuff_info.json', 'w', encoding='UTF-8') as file:
        json.dump(data, file, indent=2, ensure_ascii=False)

    total_list = []
    with open("db/stuff_info.json", "r", encoding='UTF-8') as file:
        data = json.load(file)["data"]["products"][0]
        total_list.append(data["name"])
        total_list.append(str(int(data["salePriceU"]) // 100))
        total_list.append(data["id"])
        total_list.append(data["rating"])
        total_list.append(data["feedbacks"])

    return f"""<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {total_list[0]}.
<b>–¶–µ–Ω–∞:</b> {total_list[1]} —Ä—É–±.
<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ë:</b> https://www.wildberries.ru/catalog/{total_list[2]}/detail.aspx.
<b>–†–µ–π—Ç–∏–Ω–≥:</b> {total_list[3]}/5
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫:</b> {total_list[4]} —à—Ç"""


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
def goroscop(zodf, zodm):
    try:
        data = requests.get(f"https://my-calend.ru/zodiak-sovmestimost/zhenshchina-{ZODIAKS[zodf]}-muzhchina-"
                            f"{ZODIAKS[zodm]}", headers=HEADERS).content.decode("utf-8")
        soup = bs(data, "html.parser")
        main_info = soup.find_all("h2")
        total = ""
        for obj in main_info:
            if main_info.index(obj) == 0:
                total += f"‚ù§Ô∏è‚Äçüî• {obj.text} ‚ù§Ô∏è‚Äçüî•\n"
            elif main_info.index(obj) == 1:
                total += f"üë• {obj.text} üë•\n"
            else:
                total += f"üíµ {obj.text} üíµ\n"
        return total

    except Exception as e:
        return "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –∏–∑ " \
               "–∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üíó "


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –¥–µ–≤—É—à–∫–µ
def female_kompliment(komp_index):
    sqlite_connection = sqlite3.connect('db/database.db')
    cursor = sqlite_connection.cursor()
    sqlite_select_query = """SELECT * from Compliments"""
    cursor.execute(sqlite_select_query)
    records = cursor.fetchall()
    return records[komp_index][1]


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –ø–∞—Ä–Ω—é
def male_kompliment(komp_index):
    sqlite_connection = sqlite3.connect('db/database.db')
    cursor = sqlite_connection.cursor()
    sqlite_select_query = """SELECT * from Compliments"""
    cursor.execute(sqlite_select_query)
    records = cursor.fetchall()
    return records[komp_index][2]


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏
def all_for_walk(walker_id):
    sqlite_connection = sqlite3.connect('db/database.db')
    cursor = sqlite_connection.cursor()
    result = cursor.execute("""SELECT * FROM Sights WHERE id = ?""", (walker_id,)).fetchall()
    return result


def all_for_walk_spb(walker_id):
    sqlite_connection = sqlite3.connect('db/database.db')
    cursor = sqlite_connection.cursor()
    result = cursor.execute("""SELECT * FROM SPB_Sights WHERE id = ?""", (walker_id,)).fetchall()
    return result


def film_generator(film_id):
    data = requests.get("https://www.kp.ru/afisha/msk/obzory/kino/luchshie-filmy-pro-lyubov/", headers=HEADERS).content.decode("utf-8")
    soup = bs(data, "html.parser")
    all_params = []
    names = []
    descript = []
    links = []
    for ul in soup.find('div', class_="event_content-area").find_all("ul"):
        for li in bs(str(ul), "html.parser").find_all("li"):
            all_params.append(li.text)
    for name in soup.find_all("h3", class_="wp-block-heading"):
        names.append(name.text.split(". ")[1].replace("¬´", "").replace("¬ª", ""))
    for des1 in soup.find("div", class_="event_content-area").find_all("p"):
        descript.append(des1.text)
    for link in soup.find_all("div", class_="wp-block-embed__wrapper"):
        for yt in bs(str(link), "html.parser").find_all("iframe"):
            links.append(str(yt).split("src=\"")[1].split("\"")[0])
    a = []
    for x in links:
        if x not in a:
            a.append(x)

    links = a

    total = f"""<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {names[film_id]}    
<b>{all_params[film_id + film_id * 2].split(":")[0]}:</b> {all_params[film_id + film_id * 2].split(":")[1]}
<b>{all_params[film_id + film_id * 2 + 1].split(":")[0]}:</b> {all_params[film_id + film_id * 2 + 1].split(":")[1]}
<b>{all_params[film_id + film_id * 2 + 2].split(":")[0]}:</b> {all_params[film_id + film_id * 2 + 2].split(":")[1]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {descript[film_id]}
<b>–¢—Ä–µ–π–ª–µ—Ä:</b> {links[film_id]}
"""
    return total


async def on_startup(_):
    print("–Ø –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


# –ö–Ω–æ–ø–∫–∞ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
@dp.message_handler(Text(equals=["‚ôêÔ∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚ôåÔ∏è", "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"]))
async def progul_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                           reply_markup=ikb_sex)


# –ö–Ω–æ–ø–∫–∞ –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç
@dp.message_handler(Text(equals=["üíå –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç üéÄ", "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç"]))
async def compliment_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Çüåπ",
                           reply_markup=ikb_komp)


# –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–≥—É–ª–∫–∞
@dp.message_handler(Text(equals=["üöó –ü—Ä–æ–≥—É–ª–∫–∞ üöó", "–ø—Ä–æ–≥—É–ª–∫–∞", "–ü—Ä–æ–≥—É–ª–∫–∞"]))
async def progul_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—èüè¢",
                           reply_markup=ikb_progul)


# –ö–Ω–æ–ø–∫–∞ –°—é—Ä–ø—Ä–∏–∑
@dp.message_handler(Text(equals=["üéÅ –°—é—Ä–ø—Ä–∏–∑ üéÅ", "—Å—é—Ä–ø—Ä–∏–∑", "–°—é—Ä–ø—Ä–∏–∑"]))
async def surp_func(message: types.Message):
    global tovar_pos
    random.shuffle(STUFF)
    tovar = tovar_generator(tovar_pos)
    await bot.send_photo(chat_id=message.chat.id,
                         photo=STUFF[tovar_pos][1],
                         caption=tovar,
                         parse_mode="HTML",
                         reply_markup=ikb_tovars)


# –ö–Ω–æ–ø–∫–∞ –§–∏–ª—å–º—ã
@dp.message_handler(Text(equals=["üçø –§–∏–ª—å–º—ã üé•", "—Ñ–∏–ª—å–º—ã", "–§–∏–ª—å–º—ã"]))
async def films_func(message: types.Message):
    global id_f
    id_f = 0
    await bot.send_message(chat_id=message.from_user.id,
                           text=film_generator(id_f),
                           parse_mode="HTML",
                           reply_markup=ikb_films)


# –ö–Ω–æ–ø–∫–∞ –û–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(Text(equals=["–û–ø–∏—Å–∞–Ω–∏–µ", "–æ–ø–∏—Å–∞–Ω–∏–µ"]))
async def desc_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=DESCR,
                           parse_mode="HTML")


# –ö–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å
@dp.message_handler(Text(equals=["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"]))
async def help_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP,
                           parse_mode="HTML")


# –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞
@dp.message_handler(commands=["start"])
async def start_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! \n–ï—Å–ª–∏ —Ç—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∑–Ω–∞—á–∏—Ç —Ç—ã –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å "
                                f"—Å–≤–æ—é –ø–æ–ª–æ–≤–∏–Ω–∫—É. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –≤ —ç—Ç–æ–ºüòä",
                           reply_markup=kb_main)
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker=GREETING_STICKER)
    await message.delete()


# –ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ (—É —Ç–æ–≤–∞—Ä–∞)
@dp.callback_query_handler(text="back")
async def tovar0(callback: types.CallbackQuery):
    global tovar_pos
    if callback.data == "back":
        if tovar_pos != 0:
            tovar_pos -= 1
            capt = tovar_generator(tovar_pos)
            file = InputMedia(media=STUFF[tovar_pos][1], caption=capt, parse_mode="HTML")
            await callback.message.edit_media(file, reply_markup=ikb_tovars)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥ (—É —Ç–æ–≤–∞—Ä–∞)
@dp.callback_query_handler(text="forward")
async def tovar1(callback: types.CallbackQuery):
    global tovar_pos
    if tovar_pos != len(STUFF) - 1:
        tovar_pos += 1
        capt = tovar_generator(tovar_pos)
        file = InputMedia(media=STUFF[tovar_pos][1], caption=capt, parse_mode="HTML")
        await callback.message.edit_media(file, reply_markup=ikb_tovars)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –º–æ—Å–∫–≤—ã (—É –ø—Ä–æ–≥—É–ª–∫–∏)
@dp.callback_query_handler(text="moscow")
async def moscow_city(callback: types.CallbackQuery):
    global id_walk, index_pos_walk
    random.shuffle(id_walk)
    place_from_bd = all_for_walk(id_walk[index_pos_walk])
    capt = f"""<b>{place_from_bd[0][1]}</b>
{place_from_bd[0][2]}
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {place_from_bd[0][6]}"""
    await bot.send_photo(chat_id=callback.from_user.id,
                         photo=place_from_bd[0][5],
                         caption=capt,
                         parse_mode="HTML",
                         reply_markup=ikb_sights)
    await callback.message.delete()


# –ö–æ–ª–±–µ–∫ –ú–æ—Å–∫–≤—ã –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ back_sight
@dp.callback_query_handler(text="back_sight")
async def mos_back_sight(callback: types.CallbackQuery):
    global id_walk, index_pos_walk
    if index_pos_walk - 1 >= 0:
        index_pos_walk -= 1
        place_from_bd = all_for_walk(id_walk[index_pos_walk])
        capt = f"""<b>{place_from_bd[0][1]}</b>
    {place_from_bd[0][2]}
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {place_from_bd[0][6]}"""
        file = InputMedia(media=place_from_bd[0][5], caption=capt, parse_mode="HTML")
        await callback.message.edit_media(file, reply_markup=ikb_sights)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –ú–æ—Å–∫–≤—ã –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ forward_sight
@dp.callback_query_handler(text="forward_sight")
async def mos_forward_sight(callback: types.CallbackQuery):
    global id_walk, index_pos_walk
    if index_pos_walk + 1 <= 16:
        index_pos_walk += 1
        place_from_bd = all_for_walk(id_walk[index_pos_walk])
        capt = f"""<b>{place_from_bd[0][1]}</b>
    {place_from_bd[0][2]}
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {place_from_bd[0][6]}"""
        file = InputMedia(media=place_from_bd[0][5], caption=capt, parse_mode="HTML")
        await callback.message.edit_media(file, reply_markup=ikb_sights)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text="geo")
async def geoposition(callback: types.CallbackQuery):
    place_from_bd = all_for_walk(id_walk[index_pos_walk])
    lat = place_from_bd[0][3]
    long = place_from_bd[0][4]
    await bot.send_location(chat_id=callback.from_user.id,
                            latitude=lat,
                            longitude=long,
                            reply_markup=ikb_rem)


# –£–¥–∞–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@dp.callback_query_handler(text="rem")
async def saint_city(callback: types.CallbackQuery):
    await callback.message.delete()


# –ö–æ–ª–±–µ–∫ –ø–∏—Ç–µ—Ä–∞ (—É –ø—Ä–æ–≥—É–ª–∫–∏)
@dp.callback_query_handler(text="saint")
async def saint_city(callback: types.CallbackQuery):
    global id_walk, index_pos_walk
    random.shuffle(id_walk)
    place_from_bd = all_for_walk_spb(id_walk[index_pos_walk])
    capt = f"""<b>{place_from_bd[0][1]}</b>
    {place_from_bd[0][2]}
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {place_from_bd[0][6]}"""
    await bot.send_photo(chat_id=callback.from_user.id,
                         photo=place_from_bd[0][5],
                         caption=capt,
                         parse_mode="HTML",
                         reply_markup=ikb_sights_SPB)
    await callback.message.delete()


# –ö–æ–ª–±–µ–∫ –°–ü–ë –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ back_sight_SPB
@dp.callback_query_handler(text="back_sight_SPB")
async def mos_back_sight(callback: types.CallbackQuery):
    global id_walk, index_pos_walk
    if index_pos_walk - 1 >= 0:
        index_pos_walk -= 1
        place_from_bd = all_for_walk_spb(id_walk[index_pos_walk])
        capt = f"""<b>{place_from_bd[0][1]}</b>
    {place_from_bd[0][2]}
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {place_from_bd[0][6]}"""
        file = InputMedia(media=place_from_bd[0][5], caption=capt, parse_mode="HTML")
        await callback.message.edit_media(file, reply_markup=ikb_sights_SPB)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –°–ü–ë –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ forward_sight_SPB
@dp.callback_query_handler(text="forward_sight_SPB")
async def mos_forward_sight(callback: types.CallbackQuery):
    global id_walk, index_pos_walk
    if index_pos_walk + 1 <= 16:
        index_pos_walk += 1
        place_from_bd = all_for_walk_spb(id_walk[index_pos_walk])
        capt = f"""<b>{place_from_bd[0][1]}</b>
    {place_from_bd[0][2]}
    –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {place_from_bd[0][6]}"""
        file = InputMedia(media=place_from_bd[0][5], caption=capt, parse_mode="HTML")
        await callback.message.edit_media(file, reply_markup=ikb_sights_SPB)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ SPB
@dp.callback_query_handler(text="geo_SPB")
async def geoposition_spb(callback: types.CallbackQuery):
    place_from_bd = all_for_walk_spb(id_walk[index_pos_walk])
    lat = place_from_bd[0][3]
    long = place_from_bd[0][4]
    await bot.send_location(chat_id=callback.from_user.id,
                            latitude=lat,
                            longitude=long,
                            reply_markup=ikb_rem)


# –ö–æ–ª–±–µ–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –¥–ª—è –º—É–∂—á–∏–Ω—ã
@dp.callback_query_handler(text="komp_male")
async def saint_city(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text=male_kompliment(random.randint(1, 30)))
    await callback.message.delete()


# –ö–æ–ª–±–µ–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–≤—É—à–∫–∏
@dp.callback_query_handler(text="komp_female")
async def saint_city(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text=female_kompliment(random.randint(1, 30)))
    await callback.message.delete()


# –ö–æ–ª–±–µ–∫ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
@dp.callback_query_handler(text="male")
async def male_func(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞")
    await Male.male.set()


# –ö–æ–ª–±–µ–∫ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
@dp.callback_query_handler(text="female")
async def female_func(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞")
    await Female.fem.set()


# –ö–æ–ª–±–µ–∫ –Ω–∞–∑–∞–¥ —Ñ–∏–ª—å–º—ã
@dp.callback_query_handler(text="prev")
async def prev_film_func(callback: types.CallbackQuery):
    global id_f
    if id_f != 0:
        id_f -= 1
        await callback.message.edit_text(text=film_generator(id_f),
                                         parse_mode="HTML",
                                         reply_markup=ikb_films)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ")


# –ö–æ–ª–±–µ–∫ –≤–ø–µ—Ä–µ–¥ —Ñ–∏–ª—å–º—ã
@dp.callback_query_handler(text="next")
async def next_film_func(callback: types.CallbackQuery):
    global id_f
    if id_f != 29:
        id_f += 1
        await callback.message.edit_text(text=film_generator(id_f),
                                         parse_mode="HTML",
                                         reply_markup=ikb_films)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–ª–µ–¥–Ω–∏–π —Ñ–∏–ª—å–º –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Male.male)
async def fem_zod(message: types.Message, state: FSMContext):
    await state.update_data(male_zod=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–æ–¥–∏–∞–∫ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
    await Male.next()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Male.fem)
async def get_address(message: types.Message, state: FSMContext):
    global male_zodiak, female_zodiak
    await state.update_data(female_zod=message.text)
    data = await state.get_data()
    male_zodiak, female_zodiak = data["male_zod"].lower(), data["female_zod"].lower()
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—åüíã")
    time.sleep(1)
    await bot.send_message(chat_id=message.chat.id,
                           text=goroscop(female_zodiak, male_zodiak))
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Female.fem)
async def fem_zod(message: types.Message, state: FSMContext):
    await state.update_data(female_zod=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–æ–¥–∏–∞–∫ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
    await Female.next()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Female.male)
async def get_address(message: types.Message, state: FSMContext):
    global male_zodiak, female_zodiak
    await state.update_data(male_zod=message.text)
    data = await state.get_data()
    male_zodiak, female_zodiak = data["male_zod"].lower(), data["female_zod"].lower()
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—åüíã")
    time.sleep(1)
    await bot.send_message(chat_id=message.chat.id,
                           text=goroscop(female_zodiak, male_zodiak))
    await state.finish()


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def start_func(message: types.Message):
    if '–¥–µ–Ω—å' in message.text.lower() or '—á–∏—Å–ª–æ' in message.text.lower() \
            or '—Å–µ–≥–æ–¥–Ω—è' in message.text.lower() or '–Ω–µ–¥–µ–ª' in message.text.lower():
        date_today = dt.datetime.now().strftime('%A %d-%B-%Y')
        now_time = dt.datetime.now().time()
        # –∑–∏–º–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        if ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω—è—è –≤—ã—Ö–æ–¥–Ω–∞—è –Ω–æ—á—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω–µ–µ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Ç—Ä–æ \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –ª–µ—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω—è—è –≤—ã—Ö–æ–¥–Ω–∞—è –Ω–æ—á—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω–µ–µ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Ç—Ä–æ \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –≤–µ—Å–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
             ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
             (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω—è—è –≤—ã—Ö–æ–¥–Ω–∞—è –Ω–æ—á—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω–µ–µ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Ç—Ä–æ \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –æ—Å–µ–Ω—å –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
             ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
             (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω—è—è –≤—ã—Ö–æ–¥–Ω–∞—è –Ω–æ—á—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω–µ–µ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Ç—Ä–æ \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' in date_today or 'Saturday' in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –∑–∏–º–∞ –±—É–¥–Ω–∏–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω—è—è –±—É–¥–Ω—è—è –Ω–æ—á—å  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω–µ–µ –±—É–¥–Ω–µ–µ —É—Ç—Ä–æ \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω–∏–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('December' in date_today or 'January' in date_today or 'February' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–ó–∏–º–Ω–∏–π –±—É–¥–Ω–∏–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –ª–µ—Ç–æ –±—É–¥–Ω–∏–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω—è—è –±—É–¥–Ω—è—è –Ω–æ—á—å  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω–µ–µ –±—É–¥–Ω–µ–µ —É—Ç—Ä–æ  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω–∏–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('July' in date_today or 'June' in date_today or 'August' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–õ–µ—Ç–Ω–∏–π –±—É–¥–Ω–∏–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –≤–µ—Å–Ω–∞ –±—É–¥–Ω–∏–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω—è—è –±—É–¥–Ω—è—è –Ω–æ—á—å  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω–µ–µ –±—É–¥–Ω–µ–µ —É—Ç—Ä–æ  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω–∏–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('May' in date_today or 'March' in date_today or 'April' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–µ—Å–µ–Ω–Ω–∏–π –±—É–¥–Ω–∏–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        # –æ—Å–µ–Ω—å –±—É–¥–Ω–∏–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(6) >= now_time >= dt.time(0)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω—è—è –±—É–¥–Ω—è—è –Ω–æ—á—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(6) <= now_time <= dt.time(12)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω–µ–µ –±—É–¥–Ω–µ–µ —É—Ç—Ä–æ \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(12) <= now_time <= dt.time(18)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω–∏–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )
        elif ('Sunday' not in date_today or 'Saturday' not in date_today) and \
                ('September' in date_today or 'October' in date_today or 'November' in date_today) and \
                (dt.time(18) <= now_time <= dt.time(23, 59)):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–û—Å–µ–Ω–Ω–∏–π –±—É–¥–Ω–∏–π –≤–µ—á–µ—Ä  \n {dt.datetime.now().strftime('%A %d-%B-%Y')}",
                                   )

    elif '–Ω–µ' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                               )
    elif '—Ö–æ—Ä–æ—à' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú—ã —Ä–∞–¥—ã –∑–∞ –í–∞—Å! –í—Å—ë —á—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ.",
                               )
    elif '–∫—Ä—É—Ç' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú—ã —Ä–∞–¥—ã –∑–∞ –í–∞—Å! –í—Å—ë —á—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ.",
                               )
    elif '–æ—Ç–ª–∏—á–Ω' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú—ã —Ä–∞–¥—ã –∑–∞ –í–∞—Å! –í—Å—ë —á—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ.",
                               )
    elif '–ø—Ä–µ–∫—Ä–∞—Å–Ω' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú—ã —Ä–∞–¥—ã –∑–∞ –í–∞—Å! –í—Å—ë —á—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ.",
                               )
    elif '—É–∂–∞—Å' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í—Å—ë —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ, –µ—â–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á–µ–º—É-—Ç–æ —Ö–æ—Ä–æ—à–µ–º—É."
                                    f" –ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫–∏ –∏ –≤—Å—ë –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
                               )
    elif '–∫–æ—à–º–∞—Ä' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í—Å—ë —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ, –µ—â–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á–µ–º—É-—Ç–æ —Ö–æ—Ä–æ—à–µ–º—É."
                                    f" –ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫–∏ –∏ –≤—Å—ë –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
                               )
    elif '–æ—Ç–≤—Ä–∞—Ç' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í—Å—ë —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ, –µ—â–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á–µ–º—É-—Ç–æ —Ö–æ—Ä–æ—à–µ–º—É."
                                    f" –ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫–∏ –∏ –≤—Å—ë –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
                               )
    elif '–ø–ª–æ—Ö' in message.text.lower():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í—Å—ë —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ, –µ—â–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á–µ–º—É-—Ç–æ —Ö–æ—Ä–æ—à–µ–º—É."
                                    f" –ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫–∏ –∏ –≤—Å—ë –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
                               )

    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                               reply_markup=kb_main)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
