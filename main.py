from data.imports import *

bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=MemoryStorage())
random.shuffle(STUFF)
tovar_pos = 0
male_zodiak = ""
female_zodiak = ""


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ–≤–∞—Ä–∞
def tovar_generator(tovar_pos):
    data = requests.get(STUFF[tovar_pos][0], headers=HEADERS).json()
    with open('db/stuff_info.json', 'w', encoding='UTF-8') as file:
        json.dump(data, file, indent=2, ensure_ascii=False)

    total_list = []
    with open("db/stuff_info.json", "r", encoding='UTF-8') as file:
        data = json.load(file)["data"]["products"][0]
        total_list.append(data["name"])
        total_list.append(str(int(data["salePriceU"]) // 100))
        total_list.append(data["id"])
        total_list.append(data["rating"])
        total_list.append(data["feedbacks"])

    return f"""<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {total_list[0]}.
<b>–¶–µ–Ω–∞:</b> {total_list[1]} —Ä—É–±.
<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ë:</b> https://www.wildberries.ru/catalog/{total_list[2]}/detail.aspx.
<b>–†–µ–π—Ç–∏–Ω–≥:</b> {total_list[3]}/5
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫:</b> {total_list[4]} —à—Ç"""


def goroscop(zodf, zodm):
    try:
        data = requests.get(f"https://my-calend.ru/zodiak-sovmestimost/zhenshchina-{ZODIAKS[zodf]}-muzhchina-"
                            f"{ZODIAKS[zodm]}", headers=HEADERS).content.decode("utf-8")
        soup = bs(data, "html.parser")
        main_info = soup.find_all("h2")
        total = ""
        for obj in main_info:
            if main_info.index(obj) == 0:
                total += f"‚ù§Ô∏è‚Äçüî• {obj.text} ‚ù§Ô∏è‚Äçüî•\n"
            elif main_info.index(obj) == 1:
                total += f"üë• {obj.text} üë•\n"
            else:
                total += f"üíµ {obj.text} üíµ\n"
        return total

    except Exception as e:
        return "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –∏–∑ " \
               "–∑–Ω–∞–∫–æ–≤ –∑–∞–¥–∏–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üíó "


async def on_startup(_):
    print("–Ø –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


@dp.message_handler(Text(equals="‚ôêÔ∏è–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å‚ôåÔ∏è"))
async def progul_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                           reply_markup=ikb_sex)


@dp.message_handler(Text(equals="üöó–ü—Ä–æ–≥—É–ª–∫–∞üöó"))
async def progul_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è:",
                           reply_markup=ikb_progul)


# –ö–Ω–æ–ø–∫–∞ –°—é—Ä–ø—Ä–∏–∑
@dp.message_handler(Text(equals="üéÅ–°—é—Ä–ø—Ä–∏–∑üéÅ"))
async def surp_func(message: types.Message):
    global tovar_pos
    tovar = tovar_generator(tovar_pos)
    await bot.send_photo(chat_id=message.chat.id,
                         photo=STUFF[tovar_pos][1],
                         caption=tovar,
                         parse_mode="HTML",
                         reply_markup=ikb_tovars)


# –ö–Ω–æ–ø–∫–∞ –û–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(Text(equals="–û–ø–∏—Å–∞–Ω–∏–µ"))
async def desc_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=DESCR,
                           parse_mode="HTML")


# –ö–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å
@dp.message_handler(Text(equals="–ü–æ–º–æ—â—å"))
async def help_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP,
                           parse_mode="HTML")


# –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞
@dp.message_handler(commands=["start"])
async def start_func(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ï—Å–ª–∏ —Ç—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∑–Ω–∞—á–∏—Ç —Ç—ã –æ—á–µ–Ω—å\
                                 —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–ª–æ–≤–∏–Ω–∫—É. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –≤ —ç—Ç–æ–ºüòä",
                           reply_markup=kb_main)
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker=GREETING_STICKER)
    await message.delete()


# –ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ (—É —Ç–æ–≤–∞—Ä–∞)
@dp.callback_query_handler(text="back")
async def tovar0(callback: types.CallbackQuery):
    global tovar_pos
    if callback.data == "back":
        if tovar_pos != 0:
            tovar_pos -= 1
            capt = tovar_generator(tovar_pos)
            file = InputMedia(media=STUFF[tovar_pos][1], caption=capt, parse_mode="HTML")
            await callback.message.edit_media(file, reply_markup=ikb_tovars)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥ (—É —Ç–æ–≤–∞—Ä–∞)
@dp.callback_query_handler(text="forward")
async def tovar1(callback: types.CallbackQuery):
    global tovar_pos
    if tovar_pos != len(STUFF) - 1:
        tovar_pos += 1
        capt = tovar_generator(tovar_pos)
        file = InputMedia(media=STUFF[tovar_pos][1], caption=capt, parse_mode="HTML")
        await callback.message.edit_media(file, reply_markup=ikb_tovars)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–µ")


# –ö–æ–ª–±–µ–∫ –º–æ—Å–∫–≤—ã (—É –ø—Ä–æ–≥—É–ª–∫–∏)
@dp.callback_query_handler(text="moscow")
async def moscow_city(callback: types.CallbackQuery):
    await callback.answer("asd")


# –ö–æ–ª–±–µ–∫ –ø–∏—Ç–µ—Ä–∞ (—É –ø—Ä–æ–≥—É–ª–∫–∏)
@dp.callback_query_handler(text="saint")
async def saint_city(callback: types.CallbackQuery):
    await callback.answer("asd")


# –ö–æ–ª–±–µ–∫ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
@dp.callback_query_handler(text="male")
async def male_func(callback: types.CallbackQuery):
    await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞")
    await Male.male.set()


# –ö–æ–ª–±–µ–∫ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
@dp.callback_query_handler(text="female")
async def female_func(callback: types.CallbackQuery):
    await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞")
    await Female.fem.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Male.male)
async def fem_zod(message: types.Message, state: FSMContext):
    await state.update_data(male_zod=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–æ–¥–∏–∞–∫ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
    await Male.next()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Male.fem)
async def get_address(message: types.Message, state: FSMContext):
    global male_zodiak, female_zodiak
    await state.update_data(female_zod=message.text)
    data = await state.get_data()
    male_zodiak, female_zodiak = data["male_zod"].lower(), data["female_zod"].lower()
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—åüíã")
    time.sleep(1)
    await bot.send_message(chat_id=message.chat.id,
                           text=goroscop(female_zodiak, male_zodiak))
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Female.fem)
async def fem_zod(message: types.Message, state: FSMContext):
    await state.update_data(female_zod=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–æ–¥–∏–∞–∫ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
    await Female.next()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Female.male)
async def get_address(message: types.Message, state: FSMContext):
    global male_zodiak, female_zodiak
    await state.update_data(male_zod=message.text)
    data = await state.get_data()
    male_zodiak, female_zodiak = data["male_zod"].lower(), data["female_zod"].lower()
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—åüíã")
    time.sleep(1)
    await bot.send_message(chat_id=message.chat.id,
                           text=goroscop(female_zodiak, male_zodiak))
    await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
